# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union Morph = Article | ArticleAggregator | ArticleConnection | ArticleConnectionAuthor | ArticleConnectionContent | ArticleConnectionCreated_at | ArticleConnectionId | ArticleConnectionLangue | ArticleConnectionPublished_at | ArticleConnectionSlug | ArticleConnectionTitle | ArticleConnectionUpdated_at | ArticleGroupBy | ComponentImageGalleryCaption | ComponentImageGalleryImage | ComponentLangSimpleText | ComponentLangStructurecdText | ComponentMenuMenuItem | Contact | ContactMessage | ContactMessageAggregator | ContactMessageConnection | ContactMessageConnectionCreated_at | ContactMessageConnectionEmail | ContactMessageConnectionId | ContactMessageConnectionMessage | ContactMessageConnectionName | ContactMessageConnectionUpdated_at | ContactMessageGroupBy | Gallery | Header | Map | NotFoundPage | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreated_at | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdated_at | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserGroupBy | createArticlePayload | createContactMessagePayload | createRolePayload | createUserPayload | deleteArticlePayload | deleteContactMessagePayload | deleteContactPayload | deleteFilePayload | deleteGalleryPayload | deleteHeaderPayload | deleteMapPayload | deleteNotFoundPagePayload | deleteRolePayload | deleteUserPayload | updateArticlePayload | updateContactMessagePayload | updateContactPayload | updateGalleryPayload | updateHeaderPayload | updateMapPayload | updateNotFoundPagePayload | updateRolePayload | updateUserPayload

type AdminUser {
    firstname: String!
    id: ID!
    lastname: String!
    username: String
}

type Article {
    author: UsersPermissionsUser
    content: String
    created_at: DateTime!
    id: ID!
    langue: ENUM_ARTICLE_LANGUE!
    published_at: DateTime
    slug: String
    title: String!
    updated_at: DateTime!
}

type ArticleAggregator {
    count: Int
    totalCount: Int
}

type ArticleConnection {
    aggregate: ArticleAggregator
    groupBy: ArticleGroupBy
    values: [Article]
}

type ArticleConnectionAuthor {
    connection: ArticleConnection
    key: ID
}

type ArticleConnectionContent {
    connection: ArticleConnection
    key: String
}

type ArticleConnectionCreated_at {
    connection: ArticleConnection
    key: DateTime
}

type ArticleConnectionId {
    connection: ArticleConnection
    key: ID
}

type ArticleConnectionLangue {
    connection: ArticleConnection
    key: String
}

type ArticleConnectionPublished_at {
    connection: ArticleConnection
    key: DateTime
}

type ArticleConnectionSlug {
    connection: ArticleConnection
    key: String
}

type ArticleConnectionTitle {
    connection: ArticleConnection
    key: String
}

type ArticleConnectionUpdated_at {
    connection: ArticleConnection
    key: DateTime
}

type ArticleGroupBy {
    author: [ArticleConnectionAuthor]
    content: [ArticleConnectionContent]
    created_at: [ArticleConnectionCreated_at]
    id: [ArticleConnectionId]
    langue: [ArticleConnectionLangue]
    published_at: [ArticleConnectionPublished_at]
    slug: [ArticleConnectionSlug]
    title: [ArticleConnectionTitle]
    updated_at: [ArticleConnectionUpdated_at]
}

type ComponentImageGalleryCaption {
    description: String
    id: ID!
    title: String
}

type ComponentImageGalleryImage {
    caption: ComponentImageGalleryCaption
    id: ID!
    picture: UploadFile
}

type ComponentLangSimpleText {
    fr: String
    id: ID!
    kb: String
}

type ComponentLangStructurecdText {
    fr: String
    id: ID!
    kb: String
}

type ComponentMenuMenuItem {
    id: ID!
    label_fr: String
    label_kb: String
    url: String
}

type Contact {
    alert_failed_label: ComponentLangSimpleText
    alert_success_label: ComponentLangSimpleText
    background_image: UploadFile
    button_label: ComponentLangSimpleText
    created_at: DateTime!
    email_label: ComponentLangSimpleText
    id: ID!
    message_label: ComponentLangSimpleText
    name_label: ComponentLangSimpleText
    published_at: DateTime
    title_label: ComponentLangSimpleText
    updated_at: DateTime!
}

type ContactMessage {
    created_at: DateTime!
    email: String!
    id: ID!
    message: String!
    name: String!
    updated_at: DateTime!
}

type ContactMessageAggregator {
    count: Int
    totalCount: Int
}

type ContactMessageConnection {
    aggregate: ContactMessageAggregator
    groupBy: ContactMessageGroupBy
    values: [ContactMessage]
}

type ContactMessageConnectionCreated_at {
    connection: ContactMessageConnection
    key: DateTime
}

type ContactMessageConnectionEmail {
    connection: ContactMessageConnection
    key: String
}

type ContactMessageConnectionId {
    connection: ContactMessageConnection
    key: ID
}

type ContactMessageConnectionMessage {
    connection: ContactMessageConnection
    key: String
}

type ContactMessageConnectionName {
    connection: ContactMessageConnection
    key: String
}

type ContactMessageConnectionUpdated_at {
    connection: ContactMessageConnection
    key: DateTime
}

type ContactMessageGroupBy {
    created_at: [ContactMessageConnectionCreated_at]
    email: [ContactMessageConnectionEmail]
    id: [ContactMessageConnectionId]
    message: [ContactMessageConnectionMessage]
    name: [ContactMessageConnectionName]
    updated_at: [ContactMessageConnectionUpdated_at]
}

type Gallery {
    created_at: DateTime!
    id: ID!
    images: [ComponentImageGalleryImage]
    published_at: DateTime
    updated_at: DateTime!
}

type Header {
    background_image(limit: Int, sort: String, start: Int, where: JSON): [UploadFile]
    big_title: ComponentLangSimpleText
    created_at: DateTime!
    id: ID!
    logo_image: UploadFile
    logo_title: String
    menu: [ComponentMenuMenuItem]
    published_at: DateTime
    sub_title: ComponentLangStructurecdText
    updated_at: DateTime!
}

type Map {
    created_at: DateTime!
    id: ID!
    published_at: DateTime
    title: ComponentLangSimpleText
    updated_at: DateTime!
}

type Mutation {
    createArticle(input: createArticleInput): createArticlePayload
    createContactMessage(input: createContactMessageInput): createContactMessagePayload
    "Create a new role"
    createRole(input: createRoleInput): createRolePayload
    "Create a new user"
    createUser(input: createUserInput): createUserPayload
    deleteArticle(input: deleteArticleInput): deleteArticlePayload
    deleteContact: deleteContactPayload
    deleteContactMessage(input: deleteContactMessageInput): deleteContactMessagePayload
    "Delete one file"
    deleteFile(input: deleteFileInput): deleteFilePayload
    deleteGallery: deleteGalleryPayload
    deleteHeader: deleteHeaderPayload
    deleteMap: deleteMapPayload
    deleteNotFoundPage: deleteNotFoundPagePayload
    "Delete an existing role"
    deleteRole(input: deleteRoleInput): deleteRolePayload
    "Delete an existing user"
    deleteUser(input: deleteUserInput): deleteUserPayload
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    forgotPassword(email: String!): UserPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateArticle(input: updateArticleInput): updateArticlePayload
    updateContact(input: updateContactInput): updateContactPayload
    updateContactMessage(input: updateContactMessageInput): updateContactMessagePayload
    updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
    updateGallery(input: updateGalleryInput): updateGalleryPayload
    updateHeader(input: updateHeaderInput): updateHeaderPayload
    updateMap(input: updateMapInput): updateMapPayload
    updateNotFoundPage(input: updateNotFoundPageInput): updateNotFoundPagePayload
    "Update an existing role"
    updateRole(input: updateRoleInput): updateRolePayload
    "Update an existing user"
    updateUser(input: updateUserInput): updateUserPayload
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type NotFoundPage {
    created_at: DateTime!
    id: ID!
    published_at: DateTime
    subTitle: ComponentLangSimpleText
    updated_at: DateTime!
}

type Query {
    article(id: ID!, publicationState: PublicationState): Article
    articles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Article]
    articlesConnection(limit: Int, sort: String, start: Int, where: JSON): ArticleConnection
    contact(publicationState: PublicationState): Contact
    contactMessage(id: ID!, publicationState: PublicationState): ContactMessage
    contactMessages(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [ContactMessage]
    contactMessagesConnection(limit: Int, sort: String, start: Int, where: JSON): ContactMessageConnection
    files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
    filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
    gallery(publicationState: PublicationState): Gallery
    header(publicationState: PublicationState): Header
    map(publicationState: PublicationState): Map
    me: UsersPermissionsMe
    notFoundPage(publicationState: PublicationState): NotFoundPage
    role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
    "Retrieve all the existing roles. You can't apply filters on this query."
    roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
    rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
    user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
    users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
    usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type UploadFile {
    alternativeText: String
    caption: String
    created_at: DateTime!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    id: ID!
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
    size: Float!
    updated_at: DateTime!
    url: String!
    width: Int
}

type UploadFileAggregator {
    avg: UploadFileAggregatorAvg
    count: Int
    max: UploadFileAggregatorMax
    min: UploadFileAggregatorMin
    sum: UploadFileAggregatorSum
    totalCount: Int
}

type UploadFileAggregatorAvg {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMax {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMin {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorSum {
    height: Float
    size: Float
    width: Float
}

type UploadFileConnection {
    aggregate: UploadFileAggregator
    groupBy: UploadFileGroupBy
    values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCaption {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCreated_at {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionExt {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionFormats {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionHash {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionHeight {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnectionId {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionMime {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionName {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionPreviewUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider_metadata {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionSize {
    connection: UploadFileConnection
    key: Float
}

type UploadFileConnectionUpdated_at {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionWidth {
    connection: UploadFileConnection
    key: Int
}

type UploadFileGroupBy {
    alternativeText: [UploadFileConnectionAlternativeText]
    caption: [UploadFileConnectionCaption]
    created_at: [UploadFileConnectionCreated_at]
    ext: [UploadFileConnectionExt]
    formats: [UploadFileConnectionFormats]
    hash: [UploadFileConnectionHash]
    height: [UploadFileConnectionHeight]
    id: [UploadFileConnectionId]
    mime: [UploadFileConnectionMime]
    name: [UploadFileConnectionName]
    previewUrl: [UploadFileConnectionPreviewUrl]
    provider: [UploadFileConnectionProvider]
    provider_metadata: [UploadFileConnectionProvider_metadata]
    size: [UploadFileConnectionSize]
    updated_at: [UploadFileConnectionUpdated_at]
    url: [UploadFileConnectionUrl]
    width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String!
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPermission {
    action: String!
    controller: String!
    enabled: Boolean!
    id: ID!
    policy: String
    role: UsersPermissionsRole
    type: String!
}

type UsersPermissionsRole {
    description: String
    id: ID!
    name: String!
    permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
    type: String
    users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsRoleConnection {
    aggregate: UsersPermissionsRoleAggregator
    groupBy: UsersPermissionsRoleGroupBy
    values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionId {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleConnectionName {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionType {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleGroupBy {
    description: [UsersPermissionsRoleConnectionDescription]
    id: [UsersPermissionsRoleConnectionId]
    name: [UsersPermissionsRoleConnectionName]
    type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    created_at: DateTime!
    email: String!
    id: ID!
    provider: String
    role: UsersPermissionsRole
    updated_at: DateTime!
    username: String!
}

type UsersPermissionsUserAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsUserConnection {
    aggregate: UsersPermissionsUserAggregator
    groupBy: UsersPermissionsUserGroupBy
    values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionCreated_at {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionEmail {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionId {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionProvider {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionRole {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionUpdated_at {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionUsername {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserGroupBy {
    blocked: [UsersPermissionsUserConnectionBlocked]
    confirmed: [UsersPermissionsUserConnectionConfirmed]
    created_at: [UsersPermissionsUserConnectionCreated_at]
    email: [UsersPermissionsUserConnectionEmail]
    id: [UsersPermissionsUserConnectionId]
    provider: [UsersPermissionsUserConnectionProvider]
    role: [UsersPermissionsUserConnectionRole]
    updated_at: [UsersPermissionsUserConnectionUpdated_at]
    username: [UsersPermissionsUserConnectionUsername]
}

type createArticlePayload {
    article: Article
}

type createContactMessagePayload {
    contactMessage: ContactMessage
}

type createRolePayload {
    role: UsersPermissionsRole
}

type createUserPayload {
    user: UsersPermissionsUser
}

type deleteArticlePayload {
    article: Article
}

type deleteContactMessagePayload {
    contactMessage: ContactMessage
}

type deleteContactPayload {
    contact: Contact
}

type deleteFilePayload {
    file: UploadFile
}

type deleteGalleryPayload {
    gallery: Gallery
}

type deleteHeaderPayload {
    header: Header
}

type deleteMapPayload {
    map: Map
}

type deleteNotFoundPagePayload {
    notFoundPage: NotFoundPage
}

type deleteRolePayload {
    role: UsersPermissionsRole
}

type deleteUserPayload {
    user: UsersPermissionsUser
}

type updateArticlePayload {
    article: Article
}

type updateContactMessagePayload {
    contactMessage: ContactMessage
}

type updateContactPayload {
    contact: Contact
}

type updateGalleryPayload {
    gallery: Gallery
}

type updateHeaderPayload {
    header: Header
}

type updateMapPayload {
    map: Map
}

type updateNotFoundPagePayload {
    notFoundPage: NotFoundPage
}

type updateRolePayload {
    role: UsersPermissionsRole
}

type updateUserPayload {
    user: UsersPermissionsUser
}

enum ENUM_ARTICLE_LANGUE {
    FR
    KB
}

enum PublicationState {
    LIVE
    PREVIEW
}

input ArticleInput {
    author: ID
    content: String
    created_by: ID
    langue: ENUM_ARTICLE_LANGUE!
    published_at: DateTime
    slug: String
    title: String!
    updated_by: ID
}

input ComponentImageGalleryCaptionInput {
    description: String
    title: String
}

input ComponentImageGalleryImageInput {
    caption: ComponentImageGalleryCaptionInput
    picture: ID
}

input ComponentLangSimpleTextInput {
    fr: String
    kb: String
}

input ComponentLangStructurecdTextInput {
    fr: String
    kb: String
}

input ComponentMenuMenuItemInput {
    label_fr: String
    label_kb: String
    url: String
}

input ContactInput {
    alert_failed_label: ComponentLangSimpleTextInput
    alert_success_label: ComponentLangSimpleTextInput
    background_image: ID
    button_label: ComponentLangSimpleTextInput
    created_by: ID
    email_label: ComponentLangSimpleTextInput
    message_label: ComponentLangSimpleTextInput
    name_label: ComponentLangSimpleTextInput
    published_at: DateTime
    title_label: ComponentLangSimpleTextInput
    updated_by: ID
}

input ContactMessageInput {
    created_by: ID
    email: String!
    message: String!
    name: String!
    updated_by: ID
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [ID]
    size: Float!
    updated_by: ID
    url: String!
    width: Int
}

input GalleryInput {
    created_by: ID
    images: [ComponentImageGalleryImageInput!]
    published_at: DateTime
    updated_by: ID
}

input HeaderInput {
    background_image: [ID]
    big_title: ComponentLangSimpleTextInput
    created_by: ID
    logo_image: ID
    logo_title: String
    menu: [ComponentMenuMenuItemInput]
    published_at: DateTime
    sub_title: ComponentLangStructurecdTextInput
    updated_by: ID
}

input InputID {
    id: ID!
}

input MapInput {
    created_by: ID
    published_at: DateTime
    title: ComponentLangSimpleTextInput
    updated_by: ID
}

input NotFoundPageInput {
    created_by: ID
    published_at: DateTime
    subTitle: ComponentLangSimpleTextInput
    updated_by: ID
}

input RoleInput {
    created_by: ID
    description: String
    name: String!
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input UserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String!
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String = "local"
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input createArticleInput {
    data: ArticleInput
}

input createContactMessageInput {
    data: ContactMessageInput
}

input createRoleInput {
    data: RoleInput
}

input createUserInput {
    data: UserInput
}

input deleteArticleInput {
    where: InputID
}

input deleteContactMessageInput {
    where: InputID
}

input deleteFileInput {
    where: InputID
}

input deleteRoleInput {
    where: InputID
}

input deleteUserInput {
    where: InputID
}

input editArticleInput {
    author: ID
    content: String
    created_by: ID
    langue: ENUM_ARTICLE_LANGUE
    published_at: DateTime
    slug: String
    title: String
    updated_by: ID
}

input editComponentImageGalleryCaptionInput {
    description: String
    id: ID
    title: String
}

input editComponentImageGalleryImageInput {
    caption: editComponentImageGalleryCaptionInput
    id: ID
    picture: ID
}

input editComponentLangSimpleTextInput {
    fr: String
    id: ID
    kb: String
}

input editComponentLangStructurecdTextInput {
    fr: String
    id: ID
    kb: String
}

input editComponentMenuMenuItemInput {
    id: ID
    label_fr: String
    label_kb: String
    url: String
}

input editContactInput {
    alert_failed_label: editComponentLangSimpleTextInput
    alert_success_label: editComponentLangSimpleTextInput
    background_image: ID
    button_label: editComponentLangSimpleTextInput
    created_by: ID
    email_label: editComponentLangSimpleTextInput
    message_label: editComponentLangSimpleTextInput
    name_label: editComponentLangSimpleTextInput
    published_at: DateTime
    title_label: editComponentLangSimpleTextInput
    updated_by: ID
}

input editContactMessageInput {
    created_by: ID
    email: String
    message: String
    name: String
    updated_by: ID
}

input editFileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    related: [ID]
    size: Float
    updated_by: ID
    url: String
    width: Int
}

input editGalleryInput {
    created_by: ID
    images: [editComponentImageGalleryImageInput]
    published_at: DateTime
    updated_by: ID
}

input editHeaderInput {
    background_image: [ID]
    big_title: editComponentLangSimpleTextInput
    created_by: ID
    logo_image: ID
    logo_title: String
    menu: [editComponentMenuMenuItemInput]
    published_at: DateTime
    sub_title: editComponentLangStructurecdTextInput
    updated_by: ID
}

input editMapInput {
    created_by: ID
    published_at: DateTime
    title: editComponentLangSimpleTextInput
    updated_by: ID
}

input editNotFoundPageInput {
    created_by: ID
    published_at: DateTime
    subTitle: editComponentLangSimpleTextInput
    updated_by: ID
}

input editRoleInput {
    created_by: ID
    description: String
    name: String
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input editUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String
}

input updateArticleInput {
    data: editArticleInput
    where: InputID
}

input updateContactInput {
    data: editContactInput
}

input updateContactMessageInput {
    data: editContactMessageInput
    where: InputID
}

input updateGalleryInput {
    data: editGalleryInput
}

input updateHeaderInput {
    data: editHeaderInput
}

input updateMapInput {
    data: editMapInput
}

input updateNotFoundPageInput {
    data: editNotFoundPageInput
}

input updateRoleInput {
    data: editRoleInput
    where: InputID
}

input updateUserInput {
    data: editUserInput
    where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
